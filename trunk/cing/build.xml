<?xml version="1.0" encoding="UTF-8"?>
<!-- JFD DON'T DELETE edited by JFD -->
<!-- TODO: remove the unneeded settings. -->


<project name="cing" default="jar" basedir="." >
    <description>Builds, tests, and runs the project cing.</description>
    <echo>Starting Ant with updated build file</echo>
    <property file="cing.properties"/>

    <!-- Added for functionality. Requires a ant-contrib.jar in classpath. -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" />
    
	<target name="init" description="init"  >
  	  <tstamp>
  	    	<format property="cing_version" pattern="yyyyMMdd-HHmm" />
  	  </tstamp>
	  <echo message="Initiating cing version: ${cing_version}"/>
	  <mkdir dir="${build.classes.dir}"/>
	</target>

	
    <!-- 
    ======================
    CGI-BIN SECTION
    ======================  
        <antcall target="server_cgi_replacements"/>             
    -->
    <target name="server-install" depends="init, server-cgi-install, server-web-install"
            description="Publish the server.">
    </target>
    
    <target name="server-local-install" depends="init"
            description="Run this target locally on the server.">
    	<mkdir dir="${server.cgi.dir.log}" />
    	<!-- set permissions for executable but not readible so it's secret -->
        <chmod perm="a+wx" dir="${server.cgi.dir.tmp}" />
        <chmod perm="o-r" dir="${server.cgi.dir.tmp}" />
    </target>
   
    <target name="server-cgi-install" depends="init">
        <echo message="Installing cgi scripts to server engine: ${server.cgi.user}@${server.cgi.machine}:${server.cgi.dir}"/>

        <copy todir="${tmp.local.dir}" file="${server.cgi.dir.local}/${server.cgi.python.prog}" overwrite="true"
            verbose="false"/>
    	<!-- TODO use nested match/replace for conciseness -->
        <replaceregexp file="${tmp.local.dir}/${server.cgi.python.prog}"
                               match="PYTHON_EXECUTABLE" 
                               replace='${server.cgi.python} ${server.cgi.python.flags}'
                               byline="true"/>
        <replaceregexp file="${tmp.local.dir}/${server.cgi.python.prog}"
                               match="CING_ROOT_PYTHON" 
                               replace='${server.cgi.cing.python.dir}'
                               byline="true"/>
        <replaceregexp file="${tmp.local.dir}/${server.cgi.python.prog}"
                               match="CING_SERVER_TMP" 
                               replace='${server.cgi.dir.tmp}'
                               byline="true"/>
        <replaceregexp file="${tmp.local.dir}/${server.cgi.python.prog}"
                               match="SERVER_CGI_URL_TMP" 
                               replace='${server.cgi.url.tmp}'
                               byline="true"/>
    	
    	
    	<scp    todir="${server.cgi.user}@${server.cgi.machine.looped}:${server.cgi.dir}"
            keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}" 
            verbose="true"
    		port="${server.cgi.port}"
            >
            <fileset dir="${tmp.local.dir}"  includes="${server.cgi.python.prog}"/>                     
        </scp>
    	
    </target>

    <target name="server-web-install" depends="init">
        <echo message="Installing HTML to server engine: ${server.web.machine.looped}:${server.web.dir}"/>
        <scp    todir="${server.web.user}@${server.web.machine.looped}:${server.web.dir}"
                keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}"
            port="${server.cgi.port}"
            verbose="true"
            >
        	<!-- for some reason JFD can't get the example copied over with ** without blocking
        	further ant targets. Perhaps permissions or special files prevent it?
        	Perhaps the nestedness of the .svn dir ? The work around is to ant on this once, kill it and
        	enable the below exclude afterwards.-->
            <fileset dir="${server.local.dir}" excludes="example/**"/>                     
        </scp>
        <echo message="DEBUG: Copy to ${tmp.local.dir}"/>        
        <copy todir="${tmp.local.dir}" file="${server.local.dir}/${server.web.prog}" overwrite="true" verbose="true" />
        <!-- special case for localizing the server setting in the html code.
        includes="*.html" excludes=".svn"
        ACTION="http://stella.cmbi.umcn.nl/cgi-bin/simpleCgiServer.py" --> 
        <echo message="DEBUG: Replacing some localizations in temp dir ${tmp.local.dir}"/>        
        <replaceregexp file="${tmp.local.dir}/${server.web.prog}"
                               match="(ACTION.*)" 
                               replace='ACTION="http://${server.cgi.machine}/cgi-bin/${server.cgi.python.prog}"'
                               byline="true"
        />
        <scp    todir="${server.web.user}@${server.web.machine.looped}:${server.web.dir}"
            keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}" 
            port="${server.cgi.port}"
            verbose="true"
            >
            <fileset dir="${tmp.local.dir}"  includes="${server.web.prog}"/>                     
        </scp>
    	
    	
    </target>    

    

	<!-- Is done automatically by ant build but can be used externally such as on tang. -->
	<target name="compile" description="compile" depends="init">
        <javac srcdir="${src.dir}" destdir="${build.classes.dir}">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
    	</javac>
    </target>
	
    <target name="-init-macrodef-junit">
        <macrodef name="junit" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute name="includes" default="**/*Test.java"/>
            <sequential>
                <junit showoutput="true" fork="true" maxmemory="256m" dir="tmp_dir" failureproperty="tests.failed" errorproperty="tests.failed" jvm="${platform.java}">
                    <batchtest todir="${build.test.results.dir}">
                        <fileset dir="${test.test.dir}" includes="@{includes}"/>
                    </batchtest>
                    <classpath>
                        <path path="${run.test.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper type="glob" from="test-sys-prop.*" to="*"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    
    
    <target name="-init-macrodef-java">
        <macrodef name="java" uri="http://www.netbeans.org/ns/web-project/1">
            <attribute name="classname" default="${main.class}"/>
            <attribute name="args" default="${application.args}"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java fork="true" maxmemory="256m" dir="tmp_dir" classname="@{classname}" jvm="${platform.java}">
                    <jvmarg line="${runmain.jvmargs}"/>
                    <classpath>
                        <path path="${build.classes.dir.real}:${javac.classpath}:${j2ee.platform.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper type="glob" from="run-sys-prop.*" to="*"/>
                    </syspropertyset>
                    <customize/>
                    <arg line="@{args}"/>
                </java>
            </sequential>
        </macrodef>
    </target>
    
    <!--
    ====================
    JAR BUILDING SECTION
    ====================
    Use: 
    	for resigning all jars. They need to be the same for WebApps such as Sjors.
    -->
    <target name="jar" depends="init" description="Build JAR.">
        <jar destfile="${jar.name}" basedir="${build.classes.dir}"/>
        <signjar    
                    alias="business" 
                    storepass="secret" 
                    keypass="test123"
                    keystore="${keystore}">            
            <fileset dir="lib" 
                    includes="cing.jar" />            
        </signjar>
    </target>    
    
    <target name="jarsign" depends="init" description="Resign all jars">        
        <signjar    alias="business" 
                    storepass="secret" 
                    keypass="test123"
                    keystore="${keystore}">            
            <fileset dir="lib" includes="**.jar" 
            	excludes="JFlex.jar ant-contrib.jar"
            />            
        </signjar>
    </target>    
    
    
    <!--
    ====================
    MACRO FILE EXECUTION.
    ====================
        <for list="FilterSTAR.wcf" param="fn">
        <for list="ReadEntryMmCIF.wcf" param="fn">
        <for list="CheckSurplus.wcf" param="fn">
        <for list="WriteSQLDump.wcf" param="fn">  
        <for list="AddMissingAtoms.wcf" param="fn">
        <for list="WriteEntryPDB.wcf" param="fn">
        <for list="CheckAssignment.wcf" param="fn">       
        <for list="CheckAtomNomenclature.wcf" param="fn">       
        <for list="CalcDistConstrViolation.wcf" param="fn">       
        <for list="CalcDihConstrViolation.wcf" param="fn">       
        <for list="ReadEntryMmCIF.wcf" param="fn">
        <for list="WriteEntryXplor.wcf" param="fn">
        
        <for list="CalcDistConstrViolation.wcf,CalcDistance.wcf,CheckAssignment.wcf,CheckCompleteness.wcf,CheckSurplus.wcf,FilterSTAR.wcf,GetCoplanarBases.wcf,GetHydrogenBonds.wcf,ReadEntryPDB.wcf,QuitBeforeBegun.wcf,SetAtomNomenclatureToIUPAC.wcf,ShowClassification.wcf,Sleep.wcf,WriteEntryXplor.wcf" param="fn">        
            <replace file="${tmp.local.dir}/@{fn}.log" token="ERROR" value="ERROR" summary="true"/>
    -->                
    <target name="macro_tests" depends="init" description="" >        
        <echo message="Running in: ${test_data.local.dir}"/>
        <echo message="Output to : ${tmp.local.dir}"/>
    	<!-- <echo message="classpath: ${build.classes.dir.real}:${javac.classpath}:${j2ee.platform.classpath}"/>
    -->                
        
        <for list="AddMissingAtoms.wcf" param="fn">       
            <sequential>
            <echo message="Executing macro: ${macros.local.dir}/@{fn}"/>
            <java   jvm="${platform.java}"
                    fork="true" 
                    failonerror="false"
                    resultproperty="result" 
                    maxmemory="512m" 
                    classname="cing.CloneWars.UserInterface" 
                    dir="${test_data.local.dir}"
                    input="${macros.local.dir}/@{fn}"
                    output="${tmp.local.dir}/@{fn}.log"
                    timeout="240000"                    
                >            
                <!-- FAILS IN IDE <jvmarg line="-DcingSCRIPT=${cing.root}/${macros.local.dir}/@{fn}"/> -->
                <arg    line="-at -verbosity 9" /> 
                <classpath>
                    <path path="${build.classes.dir.real}:${javac.classpath}:${j2ee.platform.classpath}"/>
                </classpath>
            </java>
            <loadfile   property="error_list"
                        srcFile="${tmp.local.dir}/@{fn}.log">
                <filterchain>
                    <linecontainsregexp>
                        <regexp pattern="(^ERROR)|(^Exception in thread)|(^\tat )"/>
                    </linecontainsregexp>
                </filterchain>
             </loadfile>        
             <antcall target="report_errors"/>
            	<echo/>
            	<echo/>
            	<echo message="Log file:"/>
            	<!--
             <loadfile property="contentLogFile"
                    srcFile="${tmp.local.dir}/@{fn}.log"/>
             <echo message="${contentLogFile}"/> 
               -->
        </sequential>        
        </for>                
    </target>           

    <target name="report_errors" if="error_list" >
        <echo message="${error_list}"/>
    </target>
	<!--
    <target name="set_version">
    	  <replaceregexp file="${src.dir}/cing/CloneWars/UserInterface.java"
    	                         match="String cing_VERSION=(.*)" 
    	                         replace='String cing_VERSION="${cing_version}";'
    	                         byline="true"/>        
    </target>
    -->
	
    <!--
    ======================
    JAVADOC SECTION
    ======================  
    Can't use "linksource" as there's a bug http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4511110
    trying with javadoc 1.5 as set in cing.properties: platform.javadoc
    -->
    <target name="javadoc" 
            depends="init,javadoc-build,javadoc-copy" 
            description="Build Javadoc and copy some extra files from the src to doc dir"/>
    <target name="javadoc-build-old" depends="init">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc 
                additionalparam="" 
                author="true"     
                breakiterator="true"
                destdir="${dist.javadoc.dir}"       
                executable="${platform.javadoc}"
                failonerror="true" 
                linksource="true" 
                noindex="false"        
                nonavbar="false" 
                notree="false"          
	            overview="${src.dir}/${project.name}/overview.html"
                private="true" 
                source="1.5" 
                splitindex="true" 
                use="true" 
                useexternalfile="false"              
                version="false" 
	            Windowtitle="${ant.project.name}">
            <classpath>
                <path path="${javac.classpath}:${j2ee.platform.classpath}"/>
            </classpath>
            <packageset dir="${src.dir}" includes="*/**"/>
        </javadoc>
    </target>
	<target name="javadoc-build">
        <mkdir dir="${dist.javadoc.dir}"/>
		<javadoc 
            additionalparam="" 
			access="private" 
			author="true" 
            breakiterator="true"
			destdir="${dist.javadoc.dir}"  
			doctitle="cing" 
			nodeprecated="false" 
			nodeprecatedlist="false" 
			noindex="false" 
			nonavbar="false" 
			notree="false" 
	        overview="${src.dir}/${ant.project.name}/overview.html"		
			source="1.4" 
			sourcepath="src" 
			splitindex="true" 
			use="true" 
            useexternalfile="false"              
			version="false"
	        Windowtitle="${ant.project.name}"	>	
	        <classpath>
	            <path path="${javac.classpath}"/>
	        </classpath>
	        <packageset dir="${src.dir}" includes="*/**"/>
        </javadoc>
	</target>

    <!-- A couple of items should be moved along with the newly generated html -->
    <target name="javadoc-copy" depends="init">
        <copy todir="${dist.javadoc.dir}">
            <fileset dir="${src.dir}" 
                    includes="**/*.gif **/*.str **/*.xls **/*.html **/*.csv"
                    excludes="**/package.html"
            />
        </copy>
    </target>    
    <!-- Installation of production site jars including cing -->
    <target name="install-jars" depends="jar">
        <echo message="Installing cing jar(s) to production site: ${install.dir}"/>
        <scp    todir="${install.dir}"
            keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}" 
            verbose="true"
            >
            <fileset dir="${lib.local.dir}"  includes="cing.jar"/>                     
        </scp>
    </target>
    <!-- Installation of production site scripts -->
    <target name="install-scripts">
        <copy todir="${install.dir}/scripts" verbose="true">
            <fileset dir="scripts" includes="*"/>
        </copy>
    </target>    
    <!-- Installation of production site python code -->
    <target name="install-python">
        <copy todir="${install.dir}/python" verbose="true">
            <fileset dir="python" includes="**"/>
        </copy>
    </target>    
    
    <!-- 
    ======================
    HOME SECTION
    ======================  
    -->
    <target name="home" depends="init,jar,home-clean,home-zip,home-cp,home-doc-cp,macro-resources-cp"
            description="Creates the cing home page with new zip and javadoc files."
    />
    <target name="home-clean" depends="init">
        <input message="Sure you want to delete the cing webserver directory: ${home.web.dir}"
        validargs="y,n" addproperty="do.delete"
                />
        <condition property="do.abort">
            <equals arg1="n" arg2="${do.delete}"/>
        </condition>
        <fail if="do.abort">Build aborted by user.</fail>        
        <sshexec host="${home.web.machine}" username="${home.web.user}"
                keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}"                
                command="\rm -rf ${home.web.dir}/*;mkdir ${home.web.dir}/doc;mkdir ${home.web.dir}/scripts;mkdir ${home.web.dir}/lib;mkdir ${home.web.dir}/macros"
        >
        </sshexec>
    </target>    
    <target name="home-zip" depends="init">
    	<property name="home.zipfile" value="${home.zipfileprefix}${cing_version}.zip"/>
        <zip destfile="${home.zipfile}" basedir=".."
               includes="cing/build.xml cing/Makefile cing/README.txt cing/cing.properties cing/tmp_dir cing/data/** cing/macros/** cing/nbproject/** cing/scripts/** cing/src/** cing/lib/** cing/web/** cing/test/**"
               excludes="**/.nbattrs **/keystore **/keyinfo.txt cing/data/test_data/tmp_dir/* cing/data/test_data/tmp_dir/sql/* cing/tmp_dir/*"                
          />
    </target>        
    <target name="home-cp" depends="init">
        <scp    todir="${home.web.usermachine}:${home.web.dir}"
                keyfile="${home.web.keyfile}" 
        	knownhosts="${home.web.knownhosts}" 
        	passphrase="${home.web.passphrase}"  
        	verbose="true"
            >
            <fileset dir="${home.local.dir}" />        
        </scp>
    </target>        
    <target name="release-zip" depends="init">
        <ftp 
        	password="${release.web.passphrase}"
    	    server="${release.web.machine}" 
        	userid="${release.web.user}"
        	remotedir="${release.web.dir}"
        	verbose="true"        	>
        	<fileset dir="${home.local.dir}" id="">
			    <include name="cing**.zip"/>
			</fileset>
        </ftp>    
    </target>        
    <target name="home-doc-cp" depends="init" 
        description="takes forever (2:20) so perhaps send a tar and untar locally so that only 1 scp is needed">
        <scp  todir="${home.web.usermachine}:${home.web.dir}/${doc.web.dir}"
                keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}"                
            >            
            <fileset dir="${doc.local.dir}"/>               
        </scp>
    </target>
  
    <!-- 
    ======================
    SERVLET SECTION
    ======================  
    -->
    <target name="servlet-install" depends="init,jar,servlet-jar-cp,servlet-resources-cp"
            description="Publishes the cing jar. Manual restart of server still needed.">
        <echo message="Make sure the following two remote directories are open for writing:"/>
        <echo message="${servlet.web.usermachine}:${servlet.web.dir}/${servlet.lib.dir}"/>
        <echo message="${servlet.web.usermachine}:${servlet.web.dir}/${servlet.resource.remote.dir}"/>
    </target>
    
    <target name="servlet-jar-cp" depends="init">
        <echo message="Installing cing jar(s) to servlet engine: ${servlet.web.usermachine}:${servlet.web.dir}/${servlet.lib.dir}"/>
    	<scp    todir="${servlet.web.usermachine}:${servlet.web.dir}/${servlet.lib.dir}"
            keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}" 
            verbose="true"
            >
            <fileset dir="${lib.local.dir}"  includes="cing.jar"/>                     
        </scp>
    </target>

    <target name="servlet-resources-cp" depends="init">
        <!-- Fails to copy the images dir funny enough. Just hangs -->
        <echo message="Installing giffies and html to servlet engine: ${servlet.web.usermachine}:${servlet.web.dir}/${servlet.resource.remote.dir}"/>
        <scp    todir="${servlet.web.usermachine}:${servlet.web.dir}/${servlet.resource.remote.dir}"
                keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}"
        	verbose="true"
            >
            <fileset dir="${servlet.resource.local.dir}" excludes=".svn"/>                     
        </scp>
    </target>    

	
    <!-- 
    ======================
    WEB APP SECTION
    ======================  
    -->
    <target name="webapp-install" depends="init,jar,home-cp,webapp-jar-cp,webapp-resources-cp"
            description="Publishes the cing jar. Manual restart of server still needed.">
        <echo message="Make sure the following two remote directories are open for writing:"/>
        <echo message="${webapp.web.usermachine}:${webapp.web.dir}/${webapp.lib.dir}"/>
        <echo message="${webapp.web.usermachine}:${webapp.web.dir}/${scripts.local.dir}"/>
    </target>
    
    <target name="webapp-jar-cp" depends="init">
        <echo message="Installing cing jar(s) to webapp engine: ${webapp.web.usermachine}:${webapp.web.dir}/${webapp.lib.dir}"/>
        <scp    todir="${webapp.web.usermachine}:${webapp.web.dir}/${webapp.lib.dir}"
                keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}"                
            >
            <!-- Normally all jars need copying -->
            <fileset dir="${lib.local.dir}"  includes="*.jar"/>            
        	<!-- <fileset dir="${lib.local.dir}"  includes="cing.jar"/> -->                     
        </scp>
    </target>

    <target name="webapp-resources-cp" depends="init">
        <echo message="Installing jnlp, giffies and html to webapp engine"/>
        <scp    todir="${webapp.web.usermachine}:${webapp.web.dir}/${scripts.local.dir}"
                keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}"                
            >
            <fileset dir="${scripts.local.dir}" includes="*.jnlp"/>                     
            <fileset dir="${macros.local.dir}" includes="*.wcf"/>                     
        </scp>
    </target>    

    <target name="macro-resources-cp" depends="init">
        <echo message="Installing macros to webapp engine"/>
        <scp    todir="${webapp.web.usermachine}:${webapp.web.dir}/${macros.local.dir}"
                keyfile="${home.web.keyfile}" knownhosts="${home.web.knownhosts}" passphrase="${home.web.passphrase}"                
            >
            <fileset dir="${macros.local.dir}" includes="*.wcf"/>                     
        </scp>
    </target>    

    <!--
    ====================
    PROFILE EXECUTION.
    ====================
    Failed to work with redirecting the output.
                output="${tmp.local.dir}/${fn}.log"
    -->                
    <target name="profile-cing" depends="init" description="" >   
        <property name="fn" value="FilterSTAR.wcf"/>
        <echo message="Executing macro: ${macros.local.dir}/${fn}"/>
        <java   jvm="${platform.java}"
                fork="true" 
                failonerror="false"
                resultproperty="result" 
                maxmemory="512m" 
                classname="cing.CloneWars.UserInterface" 
                dir="${test_data.local.dir}" 
                input="${macros.local.dir}/${fn}"
                timeout="960000"                 
            >
            <arg    line="-at" />
            <jvmarg line="${profile.jvmarg}" />            
            <classpath>
                <path path="${build.classes.dir.real}:${javac.classpath}:${j2ee.platform.classpath}"/>
            </classpath>
        </java>
    </target>
    
    <!--
        Found that after checkout to Windows there were extra eols but fixed with the below.
Default is based on the platform on which you are running this task. 
For Unix platforms, the default is "lf". 
For DOS based systems (including Windows), the default is "crlf". 
For Mac OS, the default is "cr".        
    -->                    
    <target name="fixcrlf" description="Change the end-of-line string to single cr like under Linux"
            depends="init" >
        <property name="dir_todo" value="scripts"/>        
        <echo message="Starting to fixcrlf on dir: ${dir_todo}"/>
        <fixcrlf srcDir="${dir_todo}" eol="lf"/>     
    </target>
    
	<!--
	rm -f ParseException.java SimpleCharStream.java Token.java TokenMgrError.java 
	rm -f AmberParser.java AmberParserConstants.java AmberParserTokenManager.java    	
	-->
	
    <target name="parserAmber" depends="init" description="JavaCC compiler compiler Amber" >   
	    <echo message="JavaCC compiler compiler Amber"/>
        <delete verbose="true">
	    	<fileset dir="${src.dir}/cing/Converters/Amber" 
	    			includes="ParseException.java SimpleCharStream.java Token.java TokenMgrError.java AmberParser.java AmberParserConstants.java AmberParserTokenManager.java"/>
	  	</delete>
	    <java   jvm="${platform.java}"
	            fork="true" 
	            failonerror="true"
	            classname="javacc" 
	            dir="${src.dir}/cing/Converters/Amber" 
	            timeout="9600"                 
	        >
	        <arg    line="AmberParserAll.jj" />
	        <jvmarg line="-classpath C:\Docume~1\JURGEN~1.000\workspace\cing\lib\javacc.jar" />            
	    </java>
 	 </target>
</project>
